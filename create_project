#!/usr/bin/env bash

project_dir="${1//'-'/$'_'}"
virtual_env=$project_dir
python_version=$2

is_python_version_installed=false
is_virtualenv_exists=false

separator() { printf %$1s | tr " " "-" && echo ""; }

echo_message() { separator $2 && echo -e $1 && separator $2; }

if [[ -d ${project_dir} ]]; then
	echo_message "Project directory '"${project_dir}"' exists.\
		\nRemove project directory?\
		\nPress 'Enter' or 'y' to delete or any key to exit." 50

	read -s -n 1 delete

	if [[ ${delete} == "" || ${delete} == "y" ]]; then
		bash delete_project $project_dir
		echo "Project directory '"${project_dir}"' removed."
	else
		echo "Exit" && exit 1
	fi
fi

while read -r line; do
	if [[ ${line} == ${virtual_env} ]]; then
		is_virtualenv_exists=true
		echo_message "Virtualenv '"${virtual_env}"' already exists. \
			\nRemove virtualenv '"${virtual_env}"?\nPress 'Enter' or 'y' \
			to continue or any key to exit." 52
	fi
done < <(pyenv virtualenvs | awk '$1 !~ "/" {print $1}')

if ${is_virtualenv_exists}; then
	read -s -n 1 answer

	if [[ ${answer} == "" || ${answer} == "y" ]]; then
		pyenv uninstall $virtual_env
		echo "Virtualenv '"${virtual_env}"' removed."
	else
		echo "Exit" && exit 1
	fi
fi

while read -r line; do
	if [[ ${line} == ${python_version} ]]; then
		is_python_version_installed=true
	fi
done < <(pyenv versions | awk '! /[/*]/ {print $1}')

if ! ${is_python_version_installed}; then
	{
		pyenv install ${python_version}
	} || {
		echo "" && echo "Exit"
	}

	is_python_version_installed=true
fi

if ${is_python_version_installed} && ! ${is_virtualenv_exists}; then
	pyenv virtualenv ${python_version} ${virtual_env}
	mkdir ${project_dir} && cd ${project_dir}
	pyenv local ${virtual_env}
	echo "" && echo "Done"
fi

pip install --upgrade pip

{
	pip freeze | grep Django
} || {
	pip install django
}

django-admin startproject ${project_dir}

mv ${project_dir}/manage.py ./
mv ${project_dir}/${project_dir}/* ${project_dir}
rm -rf ${project_dir}/${project_dir}/

python manage.py migrate
python manage.py createsuperuser
